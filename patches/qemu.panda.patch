diff --git a/Makefile.target b/Makefile.target
index ba12340..bc341ca 100644
--- a/Makefile.target
+++ b/Makefile.target
@@ -72,8 +72,11 @@ all: $(PROGS) stap
 
 #########################################################
 # cpu emulator library
+# llvm-config --cxxflags
+tcg/tcg-llvm.o: QEMU_CXXFLAGS+=-I/usr/include  -DNDEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -O3 -fomit-frame-pointer -fvisibility-inlines-hidden -fno-exceptions -fPIC -Woverloaded-virtual -Wcast-qual -fpermissive
 obj-y = exec.o translate-all.o cpu-exec.o
 obj-y += tcg/tcg.o tcg/optimize.o
+obj-y += tcg/tcg-llvm.o
 obj-$(CONFIG_TCG_INTERPRETER) += tci.o
 obj-$(CONFIG_TCG_INTERPRETER) += disas/tci.o
 obj-y += fpu/softfloat.o
diff --git a/exec.c b/exec.c
index 680268a..45f2ed9 100644
--- a/exec.c
+++ b/exec.c
@@ -42,6 +42,7 @@
 #include "sysemu/xen-mapcache.h"
 #include "trace.h"
 #endif
+
 #include "exec/cpu-all.h"
 
 #include "exec/cputlb.h"
diff --git a/include/exec/exec-all.h b/include/exec/exec-all.h
index a387922..6aa21a1 100644
--- a/include/exec/exec-all.h
+++ b/include/exec/exec-all.h
@@ -135,6 +135,15 @@ static inline void tlb_flush(CPUArchState *env, int flush_global)
 #define USE_DIRECT_JUMP
 #endif
 
+struct TCGLLVMTranslationBlock;
+struct TCGLLVMContext;
+#ifdef __cplusplus
+namespace llvm { class Function; }
+using llvm::Function;
+#else
+struct Function;
+#endif
+
 struct TranslationBlock {
     target_ulong pc;   /* simulated PC corresponding to this block (EIP + CS base) */
     target_ulong cs_base; /* CS base for this block */
@@ -168,6 +177,12 @@ struct TranslationBlock {
     struct TranslationBlock *jmp_next[2];
     struct TranslationBlock *jmp_first;
     uint32_t icount;
+
+    struct TCGLLVMContext *tcg_llvm_context;
+    struct Function *llvm_function;
+    uint8_t *llvm_tc_ptr;
+    uint8_t *llvm_tc_end;
+    struct TranslationBlock* llvm_tb_next[2];
 };
 
 #include "exec/spinlock.h"
@@ -294,6 +309,7 @@ static inline void tb_add_jump(TranslationBlock *tb, int n,
         /* add in TB jmp circular list */
         tb->jmp_next[n] = tb_next->jmp_first;
         tb_next->jmp_first = (TranslationBlock *)((uintptr_t)(tb) | (n));
+        tb->llvm_tb_next[n] = tb_next;
     }
 }
 
@@ -396,4 +412,8 @@ static inline int can_do_io(CPUArchState *env)
     return env->can_do_io != 0;
 }
 
+extern int generate_llvm;
+extern int execute_llvm;
+extern const int has_llvm_engine;
+
 #endif
diff --git a/include/qemu/bitmap.h b/include/qemu/bitmap.h
index 1babd5d..08755eb 100644
--- a/include/qemu/bitmap.h
+++ b/include/qemu/bitmap.h
@@ -13,7 +13,7 @@
 #define BITMAP_H
 
 #include "qemu-common.h"
-#include "qemu/bitops.h"
+#include "bitops.h"
 
 /*
  * The available bitmap operations and their rough meaning in the
@@ -31,7 +31,7 @@
  * bitmap_andnot(dst, src1, src2, nbits)	*dst = *src1 & ~(*src2)
  * bitmap_complement(dst, src, nbits)		*dst = ~(*src)
  * bitmap_equal(src1, src2, nbits)		Are *src1 and *src2 equal?
- * bitmap_intersects(src1, src2, nbits)         Do *src1 and *src2 overlap?
+ * bitmap_intersects(src1, src2, nbits) 	Do *src1 and *src2 overlap?
  * bitmap_empty(src, nbits)			Are all bits zero in *src?
  * bitmap_full(src, nbits)			Are all bits set in *src?
  * bitmap_set(dst, pos, nbits)			Set specified bit area
@@ -62,71 +62,71 @@
         )
 
 #define DECLARE_BITMAP(name,bits)                  \
-        unsigned long name[BITS_TO_LONGS(bits)]
+	unsigned long name[BITS_TO_LONGS(bits)]
 
 #define small_nbits(nbits)                      \
-        ((nbits) <= BITS_PER_LONG)
+	((nbits) <= BITS_PER_LONG)
 
-int slow_bitmap_empty(const unsigned long *bitmap, long bits);
-int slow_bitmap_full(const unsigned long *bitmap, long bits);
+int slow_bitmap_empty(const unsigned long *bitmap, int bits);
+int slow_bitmap_full(const unsigned long *bitmap, int bits);
 int slow_bitmap_equal(const unsigned long *bitmap1,
-                      const unsigned long *bitmap2, long bits);
+                   const unsigned long *bitmap2, int bits);
 void slow_bitmap_complement(unsigned long *dst, const unsigned long *src,
-                            long bits);
+                         int bits);
 void slow_bitmap_shift_right(unsigned long *dst,
-                             const unsigned long *src, int shift, long bits);
+                          const unsigned long *src, int shift, int bits);
 void slow_bitmap_shift_left(unsigned long *dst,
-                            const unsigned long *src, int shift, long bits);
+                         const unsigned long *src, int shift, int bits);
 int slow_bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
-                    const unsigned long *bitmap2, long bits);
+                 const unsigned long *bitmap2, int bits);
 void slow_bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
-                    const unsigned long *bitmap2, long bits);
+                 const unsigned long *bitmap2, int bits);
 void slow_bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
-                     const unsigned long *bitmap2, long bits);
+                  const unsigned long *bitmap2, int bits);
 int slow_bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
-                       const unsigned long *bitmap2, long bits);
+                    const unsigned long *bitmap2, int bits);
 int slow_bitmap_intersects(const unsigned long *bitmap1,
-                           const unsigned long *bitmap2, long bits);
+			const unsigned long *bitmap2, int bits);
 
-static inline unsigned long *bitmap_new(long nbits)
+static inline unsigned long *bitmap_new(int nbits)
 {
-    long len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
+    int len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
     return g_malloc0(len);
 }
 
-static inline void bitmap_zero(unsigned long *dst, long nbits)
+static inline void bitmap_zero(unsigned long *dst, int nbits)
 {
     if (small_nbits(nbits)) {
         *dst = 0UL;
     } else {
-        long len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
+        int len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
         memset(dst, 0, len);
     }
 }
 
-static inline void bitmap_fill(unsigned long *dst, long nbits)
+static inline void bitmap_fill(unsigned long *dst, int nbits)
 {
     size_t nlongs = BITS_TO_LONGS(nbits);
     if (!small_nbits(nbits)) {
-        long len = (nlongs - 1) * sizeof(unsigned long);
+        int len = (nlongs - 1) * sizeof(unsigned long);
         memset(dst, 0xff,  len);
     }
     dst[nlongs - 1] = BITMAP_LAST_WORD_MASK(nbits);
 }
 
 static inline void bitmap_copy(unsigned long *dst, const unsigned long *src,
-                               long nbits)
+                               int nbits)
 {
     if (small_nbits(nbits)) {
         *dst = *src;
     } else {
-        long len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
+        int len = BITS_TO_LONGS(nbits) * sizeof(unsigned long);
         memcpy(dst, src, len);
     }
 }
 
 static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,
-                             const unsigned long *src2, long nbits)
+                             const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         return (*dst = *src1 & *src2) != 0;
@@ -135,7 +135,7 @@ static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,
 }
 
 static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,
-                             const unsigned long *src2, long nbits)
+			const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         *dst = *src1 | *src2;
@@ -145,7 +145,7 @@ static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,
 }
 
 static inline void bitmap_xor(unsigned long *dst, const unsigned long *src1,
-                              const unsigned long *src2, long nbits)
+			const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         *dst = *src1 ^ *src2;
@@ -155,7 +155,7 @@ static inline void bitmap_xor(unsigned long *dst, const unsigned long *src1,
 }
 
 static inline int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
-                                const unsigned long *src2, long nbits)
+			const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         return (*dst = *src1 & ~(*src2)) != 0;
@@ -163,9 +163,8 @@ static inline int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
     return slow_bitmap_andnot(dst, src1, src2, nbits);
 }
 
-static inline void bitmap_complement(unsigned long *dst,
-                                     const unsigned long *src,
-                                     long nbits)
+static inline void bitmap_complement(unsigned long *dst, const unsigned long *src,
+			int nbits)
 {
     if (small_nbits(nbits)) {
         *dst = ~(*src) & BITMAP_LAST_WORD_MASK(nbits);
@@ -175,7 +174,7 @@ static inline void bitmap_complement(unsigned long *dst,
 }
 
 static inline int bitmap_equal(const unsigned long *src1,
-                               const unsigned long *src2, long nbits)
+			const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         return ! ((*src1 ^ *src2) & BITMAP_LAST_WORD_MASK(nbits));
@@ -184,7 +183,7 @@ static inline int bitmap_equal(const unsigned long *src1,
     }
 }
 
-static inline int bitmap_empty(const unsigned long *src, long nbits)
+static inline int bitmap_empty(const unsigned long *src, int nbits)
 {
     if (small_nbits(nbits)) {
         return ! (*src & BITMAP_LAST_WORD_MASK(nbits));
@@ -193,7 +192,7 @@ static inline int bitmap_empty(const unsigned long *src, long nbits)
     }
 }
 
-static inline int bitmap_full(const unsigned long *src, long nbits)
+static inline int bitmap_full(const unsigned long *src, int nbits)
 {
     if (small_nbits(nbits)) {
         return ! (~(*src) & BITMAP_LAST_WORD_MASK(nbits));
@@ -203,7 +202,7 @@ static inline int bitmap_full(const unsigned long *src, long nbits)
 }
 
 static inline int bitmap_intersects(const unsigned long *src1,
-                                    const unsigned long *src2, long nbits)
+			const unsigned long *src2, int nbits)
 {
     if (small_nbits(nbits)) {
         return ((*src1 & *src2) & BITMAP_LAST_WORD_MASK(nbits)) != 0;
@@ -212,21 +211,12 @@ static inline int bitmap_intersects(const unsigned long *src1,
     }
 }
 
-void bitmap_set(unsigned long *map, long i, long len);
-void bitmap_clear(unsigned long *map, long start, long nr);
+void bitmap_set(unsigned long *map, int i, int len);
+void bitmap_clear(unsigned long *map, int start, int nr);
 unsigned long bitmap_find_next_zero_area(unsigned long *map,
-                                         unsigned long size,
-                                         unsigned long start,
-                                         unsigned long nr,
-                                         unsigned long align_mask);
-
-static inline unsigned long *bitmap_zero_extend(unsigned long *old,
-                                                long old_nbits, long new_nbits)
-{
-    long new_len = BITS_TO_LONGS(new_nbits) * sizeof(unsigned long);
-    unsigned long *new = g_realloc(old, new_len);
-    bitmap_clear(new, old_nbits, new_nbits - old_nbits);
-    return new;
-}
+					 unsigned long size,
+					 unsigned long start,
+					 unsigned int nr,
+					 unsigned long align_mask);
 
 #endif /* BITMAP_H */
diff --git a/translate-all.c b/translate-all.c
index 1ac0246..d3a91ba 100644
--- a/translate-all.c
+++ b/translate-all.c
@@ -59,6 +59,7 @@
 #include "exec/cputlb.h"
 #include "translate-all.h"
 #include "qemu/timer.h"
+#include "tcg/tcg-llvm.h"
 
 //#define DEBUG_TB_INVALIDATE
 //#define DEBUG_FLUSH
@@ -178,6 +179,8 @@ int cpu_gen_code(CPUArchState *env, TranslationBlock *tb, int *gen_code_size_ptr
 #endif
     gen_code_size = tcg_gen_code(s, gen_code_buf);
     *gen_code_size_ptr = gen_code_size;
+    tcg_llvm_gen_code(tcg_llvm_ctx, s, tb);
+
 #ifdef CONFIG_PROFILER
     s->code_time += profile_getclock();
     s->code_in_len += tb->size;
@@ -192,6 +195,14 @@ int cpu_gen_code(CPUArchState *env, TranslationBlock *tb, int *gen_code_size_ptr
         qemu_log_flush();
     }
 #endif
+
+    ptrdiff_t size = tb->llvm_tc_end - tb->llvm_tc_ptr;
+    qemu_log("OUT (LLVM ASM) [size=%ld] (%s)\n", size,
+                tcg_llvm_get_func_name(tb));
+    log_disas((void*) tb->llvm_tc_ptr, size);
+    qemu_log("\n");
+    qemu_log_flush();
+
     return 0;
 }
 
@@ -626,6 +637,7 @@ static TranslationBlock *tb_alloc(target_ulong pc)
     tb = &tcg_ctx.tb_ctx.tbs[tcg_ctx.tb_ctx.nb_tbs++];
     tb->pc = pc;
     tb->cflags = 0;
+    tcg_llvm_tb_alloc(tb);
     return tb;
 }
 
@@ -637,6 +649,7 @@ void tb_free(TranslationBlock *tb)
     if (tcg_ctx.tb_ctx.nb_tbs > 0 &&
             tb == &tcg_ctx.tb_ctx.tbs[tcg_ctx.tb_ctx.nb_tbs - 1]) {
         tcg_ctx.code_gen_ptr = tb->tc_ptr;
+        tcg_llvm_tb_free(tb);
         tcg_ctx.tb_ctx.nb_tbs--;
     }
 }
@@ -700,6 +713,10 @@ void tb_flush(CPUArchState *env1)
         > tcg_ctx.code_gen_buffer_size) {
         cpu_abort(env1, "Internal error: code buffer overflow\n");
     }
+    int i2;
+    for(i2 = 0; i2 < tcg_ctx.tb_ctx.nb_tbs; ++i2){
+        tcg_llvm_tb_free(&tcg_ctx.tb_ctx.tbs[i2]);
+    }
     tcg_ctx.tb_ctx.nb_tbs = 0;
 
     CPU_FOREACH(cpu) {
@@ -823,6 +840,7 @@ static inline void tb_jmp_remove(TranslationBlock *tb, int n)
 static inline void tb_reset_jump(TranslationBlock *tb, int n)
 {
     tb_set_jmp_target(tb, n, (uintptr_t)(tb->tc_ptr + tb->tb_next_offset[n]));
+    tb->llvm_tb_next[n] = NULL;
 }
 
 /* invalidate one TB */
@@ -1334,6 +1352,17 @@ static TranslationBlock *tb_find_pc(uintptr_t tc_ptr)
     if (tcg_ctx.tb_ctx.nb_tbs <= 0) {
         return NULL;
     }
+    if(execute_llvm) {
+        for(m=0; m<tcg_ctx.tb_ctx.nb_tbs; m++) {
+            tb = &tcg_ctx.tb_ctx.tbs[m];
+            if(tb->llvm_function) {
+                if(tc_ptr >= (uintptr_t) tb->llvm_tc_ptr &&
+                   tc_ptr <  (uintptr_t) tb->llvm_tc_end)
+                    return tb;
+            }
+        }
+        return NULL;
+    }
     if (tc_ptr < (uintptr_t)tcg_ctx.code_gen_buffer ||
         tc_ptr >= (uintptr_t)tcg_ctx.code_gen_ptr) {
         return NULL;
